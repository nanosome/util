<project name="nanosome-global" default="build-to-zip" basedir=".">
	
	<description>
		Common deploy scripts for all nanosome projects. Creates asdoc, swc, etc.
	</description>
	
	<property file="global/global.properties" />
	
	<condition property="windows" >
		<os family="windows"/>
	</condition>
	
	<taskdef name="svn" classname="org.tigris.subversion.svnant.SvnTask">
		<classpath>
			<fileset dir="./">
				<include name="**/svn*.jar"/>
			</fileset>
		</classpath>
	</taskdef>
	
	<property name="FLEX_HOME" value="global/flex" environment="true"  />
	
	<taskdef resource="flexTasks.tasks" >
		<classpath>
			<fileset file="${FLEX_HOME}/ant/lib/flexTasks.jar"/>
		</classpath>
	</taskdef>
	
	<taskdef name="yuic" classname="com.yahoo.platform.yui.compressor.YUICompressTask">
		<classpath>
			<path>
				<pathelement location="global/yuicompressor-2.4.2.jar"/>
				<pathelement location="global/YUIAnt.jar"/>
			</path>
		</classpath>
	</taskdef>
	
	<target name="init-win" if="windows">
		<echo>Setting windows environment variables</echo>
		<property name="exec" value=".exe" environment="true"/>
	</target>
	
	<target name="init-nonwin" unless="windows">
		<echo>Setting non-windows environment variables</echo>
		<property name="exec" value="" environment="true"/>
	</target>
	
	<target name="init" depends="init-win, init-nonwin">
		<echo>Setting up basic variables</echo>
		<tstamp/>
		<svn>
			<status path="../src" revisionProperty="revision"/>
		</svn>
		<property name="build.version" value="${project.version}r${revision}" />
		<property name="build.file" value="${project.file}.${DSTAMP}.${build.version}" />
		<property name="swc.file" value="${swc.path}${project.file}.swc" />
		<property name="swc.withDependencies.file" value="${swc.path}${project.file}.withDependencies.swc" />
		<property name="lib.path" value="${build.path}/lib/"/>
	</target>
	
	<target name="prepare-temp" depends="init">
		<mkdir dir="${temp.path}" />
	</target>
	
	<target name="prepare-sources" description="Prepares all sources to be ready for compile etc."
			depends="prepare-temp">
		
		<loadfile property="license" srcfile="../license.short.txt"/>
		<delete dir="${temp.path}src"/>
		
		<echo>Replacing @license@, @version@ with ${build.version}, @contributors@ with ${project.contributors} and @date@ with ${DSTAMP} while copying sources from ${basedir}../src to ${basedir}${temp.path}src</echo>
		
		<copy includeemptydirs="false" overwrite="true" todir="${temp.path}src" filtering="true" preservelastmodified="true">
			<fileset dir="../src/" excludes="**/*.svn" includes="**/*.as"/>
			<filterset>
				<filter token="license" value="${license}"/>
				<filter token="version" value="${build.version}"/>
				<filter token="date" value="${DSTAMP}"/>
				<filter token="contributors" value="${project.contributors}"/>
			</filterset>
		</copy>
		<copy includeemptydirs="false" overwrite="true" todir="${temp.path}src" preservelastmodified="true">
			<fileset dir="../src/">
				<exclude name="**/*.as"/>
				<exclude name="**/*.svn"/>
			</fileset>
		</copy>
		<zip destfile="${build.file}.src.zip">
			<fileset dir="${temp.path}/src" />
		</zip>
		<echo>Fixing all sources in temp directory</echo>
		<fixcrlf srcdir="${temp.path}src" encoding="utf-8" casesensitive="true" eol="unix" includes="*.as"/>
	</target>
	
	<target name="compress-asdoc-scripts">
		
		<property name="asdoc" value="global/flex/asdoc/" />
		<property name="asdoc.raw" value="${asdoc}template-raw" />
		<property name="asdoc.temp" value="${asdoc}template-temp" />
		
		<delete>
			<fileset dir="${asdoc.temp}" includes="*.js,*.css"/>
		</delete>
		<copy todir="${asdoc.temp}">
			<fileset dir="${asdoc.raw}" includes="*.js,*.css"/>
		</copy>
		<!--
		<yuic linebreak="600" warn="false" munge="yes" preserveallsemicolons="true"
			outputfolder="${asdoc.temp}">
			<fileset dir="${asdoc.raw}" includes="*.js,*.css">
				<exclude name="jquery-1.4.4.min.js" />
				<exclude name="jquery-ui.js" />
			</fileset>
		</yuic>
		<copy todir="${asdoc.temp}">
			<fileset dir="${asdoc.raw}" includes="jquery*min.js"/>
			<fileset dir="${asdoc.raw}" includes="jquery-ui.js"/>
		</copy>
		-->
		<echo>Concatinating to ${asdoc}/templates/script.js</echo>
		<concat destfile="${asdoc}/templates/script.js">
			<filelist dir="${asdoc.temp}">
				<file name="shLegacy.js" />
				<file name="shCore.js" />
				<file name="shBrushAS3.js" />
				<file name="jquery-1.4.4.min.js" />
				<file name="jquery-ui.js" />
				<file name="jquery.cookie.js" />
				<file name="jquery.zebra.js" />
				<file name="asdoc-index.RequestHandler.js" />
				<file name="asdoc-index.HashLocationHandler.js" />
				<file name="asdoc-index.ContentContainerWrapper.js" />
				<file name="asdoc.en.js" />
				<file name="asdoc-inheritance.js" />
				<file name="asdoc.js" />
			</filelist>
		</concat>
		<concat destfile="${asdoc}/templates/style.css">
			<filelist dir="${asdoc.temp}">
				<file name="style.css" />
				<file name="shCore.css" />
				<file name="shCoreDefault.css" />
			</filelist>
		</concat>
	</target>
	
	<target name="create-api-docs" description="create the api documentation"
			depends="prepare-temp,prepare-sources,compress-asdoc-scripts">
		
		<echo>Creating API docs from ${temp.path}src</echo>
		<delete dir="${temp.path}/asdoc-xml" />
		
		<java classname="org.apache.tools.ant.launch.Launcher" fork="true"
			taskname="flexhome-fix" >
			<classpath>
				<pathelement location="${ant.home}/lib/ant-launcher.jar"/>
			</classpath>
			<env key="FLEX_HOME" value="${basedir}/${FLEX_HOME}"/>
			<arg value="-Dtemp.path=${basedir}/${temp.path}"/>
			<arg value="-Dproject.name=${project.name}"/>
			<arg value="-buildfile"/>
			<arg value="global/flexhome-fix.ant"/>
			<arg value="create-asdoc"/>
		</java>
		<delete file="${temp.path}/asdoc/toplevel.xml" />
		<move file="${temp.path}/asdoc/tempdita" tofile="${temp.path}/asdoc-xml"></move>
		<zip destfile="${build.file}.asdoc.zip" level="9">
			<fileset dir="${temp.path}asdoc/" includes="**/*.*" />
		</zip>
	</target>
	
	<target name="create-swc" depends="prepare-temp,prepare-sources,create-withDependencies-swc">
		<echo>Creating ${build.file}.swc from ${temp.path}src</echo>
		<java classname="org.apache.tools.ant.launch.Launcher" fork="true"
			taskname="flexhome-fix" >
			<classpath>
				<pathelement location="${ant.home}/lib/ant-launcher.jar"/>
			</classpath>
			<env key="FLEX_HOME" value="${basedir}/${FLEX_HOME}"/>
			<arg value="-Dbasedir=${basedir}/"/>
			<arg value="-Dtemp.path=${basedir}/${temp.path}/"/>
			<arg value="-Dproject.name=${project.name}"/>
			<arg value="-Dbuild.file=${build.file}"/>
			<arg value="-buildfile"/>
			<arg value="global/flexhome-fix.ant"/>
			<arg value="create-swc"/>
		</java>
		<echo>Adding asdoc to the swc</echo>
		<zip destfile="${build.file}.swc" update="true">
			<zipfileset dir="${temp.path}/asdoc-xml" prefix="docs">
				<include name="*.*"/>
				<exclude name="ASDoc_Config.xml"/>
				<exclude name="overviews.xml"/>
			</zipfileset>
		</zip>
		<mkdir dir="../swc"/>
		<copy file="${build.file}.swc" tofile="${swc.file}"/>
	</target>
	
	<condition property="project.compiler-withDependencies-options">
		<available file="compiler.dependencies.xml" />
	</condition>
	
	<target name="create-withDependencies-swc" if="project.compiler-withDependencies-options" depends="create-api-docs">
		<echo>Creating ${build.file}.withDependencies.swc from ${temp.path}src</echo>
		<java classname="org.apache.tools.ant.launch.Launcher" fork="true"
			taskname="flexhome-fix" >
			<classpath>
				<pathelement location="${ant.home}/lib/ant-launcher.jar"/>
			</classpath>
			<env key="FLEX_HOME" value="${basedir}/${FLEX_HOME}"/>
			<arg value="-Dbasedir=${basedir}/"/>
			<arg value="-Dtemp.path=${basedir}/${temp.path}"/>
			<arg value="-Dproject.name=${project.name}"/>
			<arg value="-Dbuild.file=${build.file}"/>
			<arg value="-buildfile"/>
			<arg value="global/flexhome-fix.ant"/>
			<arg value="create-swc-dependencies"/>
		</java>
		<echo>Adding asdoc to the swc</echo>
		<zip destfile="${build.file}.withDependencies.swc" update="true">
			<zipfileset dir="${temp.path}/asdoc-xml" prefix="docs">
				<include name="*.*"/>
				<exclude name="ASDoc_Config.xml"/>
				<exclude name="overviews.xml"/>
			</zipfileset>
		</zip>
		<mkdir dir="../swc"/>
		<copy file="${build.file}.withDependencies.swc" tofile="${swc.withDependencies.file}"/>
	</target>
	
	<target name="prepare-build" description="Prepares a src folder with all files of a build"
			depends="clean,svn-update,create-api-docs,create-swc,prepare-sources">
		
		<echo>Preparing build directory in ${build.path}</echo>
		<delete dir="${build.path}" />
		<mkdir dir="${build.path}" />
		<copy todir="${build.path}">
			<fileset dir="${temp.path}">
				<include name="*.swc"/>
				<include name="*.zip"/>
			</fileset>
		</copy>
		<copy todir="${build.path}" file="../license.txt" />
		<antcall target="copy-dependencies-to-build-path" />
	</target>
	
	<target name="svn-update">
		<svn>
			<update dir="../"/>
		</svn>
	</target>
	
	<target name="copy-dependencies-to-build-path" ></target>
	
	<target name="build-to-svn" description="Builds a version and pushes it to the SVN"
			depends="build-to-zip">
		
		<property name="svn.build.path" value="${svn.path}/build/${project.file}.${DSTAMP}.${build.version}/"/>
		
		<echo>Building ${svn.build.path} in ${build.path}</echo>
		
		<input addproperty="svn.user">SVN Username</input>
		<input addproperty="svn.pwd">SVN Password</input> 
		
		<svn javahl="${javahl}" svnkit="${svnkit}" username="${svn.user}" password="${svn.pwd}">
			<mkdir url="${svn.build.path}" message="Build preparation" />
			<checkout url="${svn.build.path}" destpath="${build.path}/" />
			<add recurse="true">
				<fileset dir="${build.path}" >
					<include name="**/*.*"/>
				</fileset>
			</add>
			<commit message="Tagged version: ${project.version}" dir="${build.path}/"/>
		</svn>
		
	</target>
			
	<target name="build-to-zip" description="Builds a version and zips it"
			depends="prepare-build">
		<zip destfile="${build.file}.zip">
			<fileset dir="${build.path}" />
		</zip>
	</target>
	
	<target name="clean" depends="prepare-temp">
		<delete dir="${temp.path}" />
	</target>
	
</project>